totalData_FSD <- rbind(totalData_FSD, xmlData)
}
# Open API 호출(국제선)
for(i in 1:loopCount_FSI){
url <- paste0(serviceURL_FS,op_FSI,parameter_FS,
paste0("&pageNo=", i)) # 반복 실행 때마다 페이지 위치 1씩 증가
doc <- xmlTreeParse(url, useInternalNodes = TRUE, encoding = "UTF-8")
# XML Root Node 추출
rootNode <- xmlRoot(doc)
# item Node의 데이터 추출
xmlData <- xmlToDataFrame(nodes = getNodeSet(rootNode,'//item'))
totalData_FSI <- rbind(totalData_FSI, xmlData)
}
# 운항 시작일 및 종료일 데이터 타입 변경(chr -> Date)
totalData_FSD$domesticStdate <- as.Date(totalData_FSD$domesticStdate)
totalData_FSD$domesticEddate <- as.Date(totalData_FSD$domesticEddate)
totalData_FSD$domesticStartTime <- format(strptime(totalData_FSD$domesticStartTime,"%H%M"),"%H:%M")
totalData_FSD$domesticArrivalTime <- format(strptime(totalData_FSD$domesticArrivalTime,"%H%M"),"%H:%M")
totalData_FSI$internationalStdate <- as.Date(totalData_FSI$internationalStdate)
totalData_FSI$internationalEddate <- as.Date(totalData_FSI$internationalEddate)
totalData_FSI$internationalTime <- format(strptime(totalData_FSI$internationalTime,"%H%M"),"%H:%M")
# 2011~2020년의 운항 스케줄 데이터 추출 및 컬럼 순서 정돈
totalData_FSD <- distinct(totalData_FSD) %>%
filter(domesticStdate <= as.Date('2020-12-31') &
domesticEddate >= as.Date('2011-01-01') &
domesticStdate <= domesticEddate) %>%  # 도착 일정이 출발 일정보다 이후인 데이터만 추출
arrange(domesticStdate, domesticEddate) %>%
select("domesticNum", "airlineEnglish","startcityCode", "startcity", "arrivalcityCode", "arrivalcity",
"domesticStdate", "domesticEddate", "domesticStartTime", "domesticArrivalTime","flightPurpose",
"domesticMon","domesticTue","domesticWed","domesticThu","domesticFri","domesticSat","domesticSun")
totalData_FSI <- distinct(totalData_FSI) %>%
filter(internationalStdate <= as.Date('2020-12-31') &
internationalEddate >= as.Date('2011-01-01') &
internationalStdate <= internationalEddate) %>%  # 도착 일정이 출발 일정보다 이후인 데이터만 추출
arrange(internationalStdate, internationalEddate, internationalIoType) %>%
select("internationalNum", "airlineEnglish", "airportCode", "airport", "cityCode", "city",
"internationalStdate", "internationalEddate", "internationalTime", "internationalIoType","flightPurpose",
"internationalMon","internationalTue","internationalWed","internationalThu",
"internationalFri","internationalSat","internationalSun")
# 컬럼명 바꾸기
names(totalData_FSD) <- c("flightNum", "airline","startCityCode", "startCity", "arrivalCityCode", "arrivalCity",
"startDate", "endDate", "startTime", "arrivalTime","flightPurpose",
"mon","tue","wed","thu","fri","sat","sun")
names(totalData_FSI) <- c("flightNum", "airline", "domesticCityCode", "domesticCity",
"internationalCityCode", "internationalCity",
"startDate", "endDate", "recordedTime", "ioType","flightPurpose",
"mon","tue","wed","thu","fri","sat","sun")
head(totalData_FSD)  # 국내 항공기 운항 스케줄 데이터
head(totalData_FSI)  # 국제 항공기 운항 스케줄 데이터
# 저장용 데이터베이스
totalData_TD <- data.frame()
# 데이터 추출용 URL
url_TD <- paste0(serviceURL_TD, op_TD, parameter_TD)
# Open API 호출 (page수 확인용)
xmlDocument_TD <- xmlTreeParse(url_TD, useInternalNodes = TRUE, encoding = "UTF-8")
# XML Root Node 추출
rootNode_TD <- xmlRoot(xmlDocument_TD)
# 오픈API 호출 결과 데이터의 개수
numOfRows_TD <- as.numeric(xpathSApply(rootNode_TD, "//numOfRows",xmlValue))
# 전체 데이터의 개수 확인
totalCount_TD <- as.numeric(xpathSApply(rootNode_TD, "//totalCount",xmlValue))
# 총 open API 호출 횟수 계산
loopCount_TD <- round(totalCount_TD/numOfRows_TD, 0)
# API 호출 횟수 보정
if(loopCount_TD * numOfRows_TD < totalCount_TD){loopCount_TD <- loopCount_TD + 1}
# Open API 호출
for(i in 1:loopCount_TD){
url <- paste0(serviceURL_TD,op_TD,parameter_TD,
paste0("&pageNo=", i)) # 반복 실행 때마다 페이지 위치 1씩 증가
doc <- xmlTreeParse(url, useInternalNodes = TRUE, encoding = "UTF-8")
# XML Root Node 추출
rootNode <- xmlRoot(doc)
# item Node의 데이터 추출
xmlData <- xmlToDataFrame(nodes = getNodeSet(rootNode,'//item'))
totalData_TD <- rbind(totalData_TD, xmlData)
}
# 거리 및 시간 데이터 타입 변경(chr -> numeric)
totalData_TD$km <- as.numeric(totalData_TD$km)
totalData_TD$time <- as.numeric(totalData_TD$time)
# 컬럼 순서 정돈
totalData_TD <- totalData_TD %>% select("tof", "arp", "odp", "km", "time") %>%
arrange(tof, arp, odp)
# 컬럼명 바꾸기
names(totalData_TD) <- c("diType", "cityCode1", "cityCode2", "distance.km", "time.m")
head(totalData_TD)
# 데이터 시각화를 위해 온실가스 데이터 형태 변형
fuel1Data <- totalData_GG[,c("yyyy", "fuel1")]
fuel1Data <- cbind(fuel1Data, rep("직접온실가스", times=nrow(fuel1Data)))
colnames(fuel1Data) <- c("year", "stats", "fuelType")
fuel2Data <- totalData_GG[,c("yyyy", "fuel2")]
fuel2Data <- cbind(fuel2Data, rep("간접온실가스", times=nrow(fuel1Data)))
colnames(fuel2Data) <- c("year", "stats", "fuelType")
fuel3Data <- totalData_GG[,c("yyyy","totalTco2e")]
fuel3Data <- cbind(fuel3Data, rep("온실가스총합", times=nrow(fuel1Data)))
colnames(fuel3Data) <- c("year", "stats", "fuelType")
fuelData <- rbind(fuel1Data,fuel2Data)
fuelData <- rbind(fuelData, fuel3Data)
# 연도별 총 국내 공항(인천 포함) 출발+도착 건수 추출
subflgtData <- subset(totalData_AS, airport=="총계")[,c("subflgt","year")]
# 시각화용 데이터 제작
fig1Data <- inner_join(fuelData, subflgtData, by="year")
pareData <- fig1Data %>% filter(fuelType != "온실가스총합")
totalData <- fig1Data %>% filter(fuelType == "온실가스총합")
plot_ly() %>%
add_bars(x = ~pareData$year, y = ~pareData$stats, color = ~pareData$fuelType, colors = c("cadetblue4","cadetblue1")) %>%
add_lines(x = ~totalData$year, y = ~totalData$subflgt/1000, name="운행편수", yaxis = "y2",
line = list(color = 'rgb(44, 100, 229)')) %>%
layout(title = list(text="<b>연도별 국내 공항 총 운행편수 및 온실가스 배출량</b>",xanchor="left",x=0,y=0.97),
margin = list(r=100),
xaxis = list(title = '<b>연도</b>'),
yaxis = list(title = '<b>배출량</b> (단위: tCO2e)', tickformat = ",d"),
yaxis2 = list(title = '<b>운항편수</b> (출발 및 도착 합계, 단위: 천편)',
side = "right", overlaying = "y", rangemode = "tozero", tickformat = "r"),
barmode="stack",
legend = list(orientation = 'h',xanchor = "right",x = 1))
subData2011_FSD <- totalData_FSD %>% select("flightNum", "startCityCode", "arrivalCityCode", "startDate", "endDate",
"mon", "tue", "wed", "thu", "fri", "sat", "sun") %>%
filter(format(endDate, "%Y")=="2011" | format(startDate, "%Y")=="2011")
subData2019_FSD <- totalData_FSD %>% select("flightNum", "startCityCode", "arrivalCityCode", "startDate", "endDate",
"mon", "tue", "wed", "thu", "fri", "sat", "sun") %>%
filter(format(endDate, "%Y")=="2019" | format(startDate, "%Y")=="2019")
subData2011_FSI <- totalData_FSI %>% select("flightNum", "domesticCityCode", "internationalCityCode", "startDate", "endDate", "ioType",
"mon", "tue", "wed", "thu", "fri", "sat", "sun") %>%
filter(format(endDate, "%Y")=="2011" | format(startDate, "%Y")=="2011")
subData2019_FSI <- totalData_FSI %>% select("flightNum", "domesticCityCode", "internationalCityCode", "startDate", "endDate", "ioType",
"mon", "tue", "wed", "thu", "fri", "sat", "sun") %>%
filter(format(endDate, "%Y")=="2019" | format(startDate, "%Y")=="2019")
subData2011_FSD$startDate <- as.Date(ifelse(subData2011_FSD$startDate < as.Date('2011-01-01'),
format(as.Date('2011-01-01'),"%Y-%m-%d"),
format(subData2011_FSD$startDate, "%Y-%m-%d")))
subData2011_FSD$endDate <- as.Date(ifelse(subData2011_FSD$endDate > as.Date('2011-12-31'),
format(as.Date('2011-12-31'),"%Y-%m-%d"),
format(subData2011_FSD$endDate, "%Y-%m-%d")))
subData2019_FSD$startDate <- as.Date(ifelse(subData2019_FSD$startDate < as.Date('2019-01-01'),
format(as.Date('2019-01-01'),"%Y-%m-%d"),
format(subData2019_FSD$startDate, "%Y-%m-%d")))
subData2019_FSD$endDate <- as.Date(ifelse(subData2019_FSD$endDate > as.Date('2019-12-31'),
format(as.Date('2019-12-31'),"%Y-%m-%d"),
format(subData2019_FSD$endDate, "%Y-%m-%d")))
subData2011_FSI$startDate <- as.Date(ifelse(subData2011_FSI$startDate < as.Date('2011-01-01'),
format(as.Date('2011-01-01'),"%Y-%m-%d"),
format(subData2011_FSI$startDate, "%Y-%m-%d")))
subData2011_FSI$endDate <- as.Date(ifelse(subData2011_FSI$endDate > as.Date('2011-12-31'),
format(as.Date('2011-12-31'),"%Y-%m-%d"),
format(subData2011_FSI$endDate, "%Y-%m-%d")))
subData2019_FSI$startDate <- as.Date(ifelse(subData2019_FSI$startDate < as.Date('2019-01-01'),
format(as.Date('2019-01-01'),"%Y-%m-%d"),
format(subData2019_FSI$startDate, "%Y-%m-%d")))
subData2019_FSI$endDate <- as.Date(ifelse(subData2019_FSI$endDate > as.Date('2019-12-31'),
format(as.Date('2019-12-31'),"%Y-%m-%d"),
format(subData2019_FSI$endDate, "%Y-%m-%d")))
# 2011년 국내 항공기 운행 스케줄
## 요일별 운항일수 데이터 제작 (flightDay_FSD)
dateInterval_FSD <- subData2011_FSD$endDate - subData2011_FSD$startDate  # 운행일수
flightPerDay_FSD <- floor(dateInterval_FSD/7)  # 요일 당 최소운항횟수 리스트
flightAddDay_FSD <- floor((dateInterval_FSD/7 - flightPerDay_FSD)*7)  # 보정용 요일별 운항횟수 리스트
flightDay_FSD <- flightPerDay_FSD  # 요일별 운항일수 데이터
for(i in 1:6){
flightDay_FSD <- cbind(flightDay_FSD, flightPerDay_FSD)
}
colnames(flightDay_FSD) <- list(1,2,3,4,5,6,7)  # 컬럼명을 요일로 수정(1 = 월요일)
startDate_FSD <- as.numeric(factor(weekdays(subData2011_FSD$startDate)))  # 항공편별 시작 요일 숫자 환산값
for(i in 1:length(flightAddDay_FSD)){
for(j in 0:6){
if(j <= flightAddDay_FSD[i]){
flightDay_FSD[i,(j+startDate_FSD[i]-1)%%7+1] <- flightDay_FSD[i,(j+startDate_FSD[i]-1)%%7+1]+1
}
}
}
## 기간 내 요일별 추정 운행일수 합산
totalFlight_FSD <- rep(0, times=nrow(subData2011_FSD))
flightWeekdays_FSD <- subData2011_FSD %>% select("mon","tue","wed","thu","fri","sat","sun")
for(i in 1:nrow(subData2011_FSD)){
for(j in 1:7){
if(flightWeekdays_FSD[i,j] != "N"){
totalFlight_FSD[i] <- totalFlight_FSD[i]+flightDay_FSD[i,j]
}
}
}
## 총 추정 운행일수 데이터를 subData_FSD에 합산
subData2011_FSD$totalFlight <- totalFlight_FSD
## 공항별 총 운항 횟수(출발+도착) 추출
### 임시로 startCityCode가 arrivalCityCode보다 뒤면 역순, 아니면 정순으로 컬럼 새로 지정
subData2011_FSD$startCityCode2 <- ifelse(as.character(subData2011_FSD$startCityCode) <= as.character(subData2011_FSD$arrivalCityCode),
as.character(subData2011_FSD$startCityCode),
as.character(subData2011_FSD$arrivalCityCode))
subData2011_FSD$arrivalCityCode2 <- ifelse(as.character(subData2011_FSD$startCityCode) <= as.character(subData2011_FSD$arrivalCityCode),
as.character(subData2011_FSD$arrivalCityCode),
as.character(subData2011_FSD$startCityCode))
### start / arrivalCityCode에 start / arrivalCityCode2 값 덮어쓰기
subData2011_FSD$startCityCode <- subData2011_FSD$startCityCode2
subData2011_FSD$arrivalCityCode <- subData2011_FSD$arrivalCityCode2
### 공항별 총 운항 횟수(출발+도착) 추출 + 컬럼명 변경(start->1, arrival->2)
subData2011_FSD <- subData2011_FSD %>% group_by(startCityCode, arrivalCityCode) %>%
summarise(totalFlight=sum(totalFlight)) %>%
rename(cityCode1=startCityCode, cityCode2=arrivalCityCode)
## 연도 및 국내/국제 타입 컬럼 추가
subData2011_FSD$flightYear <- rep(2011, times=nrow(subData2011_FSD))
subData2011_FSD$diType <- rep("D", times=nrow(subData2011_FSD))
## 출발/도착지 간 노선 거리 및 소요 시간 추가
subData2011_FSD <- left_join(subData2011_FSD, totalData_TD, by=c("diType", "cityCode1", "cityCode2"))
head(subData2011_FSD %>% arrange(desc(totalFlight)),3)
# 2019년 국내 항공기 운행 스케줄
## 요일별 운항일수 데이터 제작 (flightDay_FSD)
dateInterval_FSD <- subData2019_FSD$endDate - subData2019_FSD$startDate  # 운행일수
flightPerDay_FSD <- floor(dateInterval_FSD/7)  # 요일 당 최소운항횟수 리스트
flightAddDay_FSD <- floor((dateInterval_FSD/7 - flightPerDay_FSD)*7)  # 보정용 요일별 운항횟수 리스트
flightDay_FSD <- flightPerDay_FSD  # 요일별 운항일수 데이터
for(i in 1:6){
flightDay_FSD <- cbind(flightDay_FSD, flightPerDay_FSD)
}
colnames(flightDay_FSD) <- list(1,2,3,4,5,6,7)  # 컬럼명을 요일로 수정(1 = 월요일)
startDate_FSD <- as.numeric(factor(weekdays(subData2019_FSD$startDate)))  # 항공편별 시작 요일 숫자 환산값
for(i in 1:length(flightAddDay_FSD)){
for(j in 0:6){
if(j <= flightAddDay_FSD[i]){
flightDay_FSD[i,(j+startDate_FSD[i]-1)%%7+1] <- flightDay_FSD[i,(j+startDate_FSD[i]-1)%%7+1]+1
}
}
}
## 기간 내 요일별 추정 운행일수 합산
totalFlight_FSD <- rep(0, times=nrow(subData2019_FSD))
flightWeekdays_FSD <- subData2019_FSD %>% select("mon","tue","wed","thu","fri","sat","sun")
for(i in 1:nrow(subData2019_FSD)){
for(j in 1:7){
if(flightWeekdays_FSD[i,j] != "N"){
totalFlight_FSD[i] <- totalFlight_FSD[i]+flightDay_FSD[i,j]
}
}
}
## 총 추정 운행일수 데이터를 subData_FSD에 합산
subData2019_FSD$totalFlight <- totalFlight_FSD
## 공항별 총 운항 횟수(출발+도착) 추출
### 임시로 startCityCode가 arrivalCityCode보다 뒤면 역순, 아니면 정순으로 컬럼 새로 지정
subData2019_FSD$startCityCode2 <- ifelse(as.character(subData2019_FSD$startCityCode) <= as.character(subData2019_FSD$arrivalCityCode),
as.character(subData2019_FSD$startCityCode),
as.character(subData2019_FSD$arrivalCityCode))
subData2019_FSD$arrivalCityCode2 <- ifelse(as.character(subData2019_FSD$startCityCode) <= as.character(subData2019_FSD$arrivalCityCode),
as.character(subData2019_FSD$arrivalCityCode),
as.character(subData2019_FSD$startCityCode))
### start / arrivalCityCode에 start / arrivalCityCode2 값 덮어쓰기
subData2019_FSD$startCityCode <- subData2019_FSD$startCityCode2
subData2019_FSD$arrivalCityCode <- subData2019_FSD$arrivalCityCode2
### 공항별 총 운항 횟수(출발+도착) 추출 + 컬럼명 변경(start->1, arrival->2)
subData2019_FSD <- subData2019_FSD %>% group_by(startCityCode, arrivalCityCode) %>%
summarise(totalFlight=sum(totalFlight)) %>%
rename(cityCode1=startCityCode, cityCode2=arrivalCityCode)
## 연도 및 국내/국제 타입 컬럼 추가
subData2019_FSD$flightYear <- rep(2019, times=nrow(subData2019_FSD))
subData2019_FSD$diType <- rep("D", times=nrow(subData2019_FSD))
## 출발/도착지 간 노선 거리 및 소요 시간 추가
subData2019_FSD <- left_join(subData2019_FSD, totalData_TD, by=c("diType", "cityCode1", "cityCode2"))
head(subData2019_FSD %>% arrange(desc(totalFlight)),3)
# 2011년 국제 항공기 운행 스케줄
## 요일별 운항일수 데이터 제작 (flightDay_FSI)
dateInterval_FSI <- subData2011_FSI$endDate - subData2011_FSI$startDate  # 운행일수
flightPerDay_FSI <- floor(dateInterval_FSI/7)  # 요일 당 최소운항횟수 리스트
flightAddDay_FSI <- floor((dateInterval_FSI/7 - flightPerDay_FSI)*7)  # 보정용 요일별 운항횟수 리스트
flightDay_FSI <- flightPerDay_FSI  # 요일별 운항일수 데이터
for(i in 1:6){
flightDay_FSI <- cbind(flightDay_FSI, flightPerDay_FSI)
}
colnames(flightDay_FSI) <- list(1,2,3,4,5,6,7)  # 컬럼명을 요일로 수정(1 = 월요일)
startDate_FSI <- as.numeric(factor(weekdays(subData2011_FSI$startDate)))  # 항공편별 시작 요일 숫자 환산값
for(i in 1:length(flightAddDay_FSI)){
for(j in 0:6){
if(j <= flightAddDay_FSI[i]){
flightDay_FSI[i,(j+startDate_FSI[i]-1)%%7+1] <- flightDay_FSI[i,(j+startDate_FSI[i]-1)%%7+1]+1
}
}
}
## 기간 내 요일별 추정 운행일수 합산
totalFlight_FSI <- rep(0, times=nrow(subData2011_FSI))
flightWeekdays_FSI <- subData2011_FSI %>% select("mon","tue","wed","thu","fri","sat","sun")
for(i in 1:nrow(subData2011_FSI)){
for(j in 1:7){
if(flightWeekdays_FSI[i,j] != "N"){
totalFlight_FSI[i] <- totalFlight_FSI[i]+flightDay_FSI[i,j]
}
}
}
## 총 추정 운행일수 데이터를 subData_FSI에 합산
subData2011_FSI$totalFlight <- totalFlight_FSI
## 공항별 총 운항 횟수(출발+도착) 추출 + 컬럼명 변경(domestic->1, international->2)
subData2011_FSI <- subData2011_FSI %>% group_by(domesticCityCode, internationalCityCode) %>%
summarise(totalFlight=sum(totalFlight)) %>%
rename(cityCode1=domesticCityCode, cityCode2=internationalCityCode)
## 연도 및 국내/국제 타입 컬럼 추가
subData2011_FSI$flightYear <- rep(2011, times=nrow(subData2011_FSI))
subData2011_FSI$diType <- rep("I", times=nrow(subData2011_FSI))
## 출발/도착지 간 노선 거리 및 소요 시간 추가
subData2011_FSI <- left_join(subData2011_FSI, totalData_TD, by=c("diType", "cityCode1", "cityCode2"))
head(subData2011_FSI %>% arrange(desc(totalFlight)),3)
# 2019년 국제 항공기 운행 스케줄
## 요일별 운항일수 데이터 제작 (flightDay_FSI)
dateInterval_FSI <- subData2019_FSI$endDate - subData2019_FSI$startDate  # 운행일수
flightPerDay_FSI <- floor(dateInterval_FSI/7)  # 요일 당 최소운항횟수 리스트
flightAddDay_FSI <- floor((dateInterval_FSI/7 - flightPerDay_FSI)*7)  # 보정용 요일별 운항횟수 리스트
flightDay_FSI <- flightPerDay_FSI  # 요일별 운항일수 데이터
for(i in 1:6){
flightDay_FSI <- cbind(flightDay_FSI, flightPerDay_FSI)
}
colnames(flightDay_FSI) <- list(1,2,3,4,5,6,7)  # 컬럼명을 요일로 수정(1 = 월요일)
startDate_FSI <- as.numeric(factor(weekdays(subData2019_FSI$startDate)))  # 항공편별 시작 요일 숫자 환산값
for(i in 1:length(flightAddDay_FSI)){
for(j in 0:6){
if(j <= flightAddDay_FSI[i]){
flightDay_FSI[i,(j+startDate_FSI[i]-1)%%7+1] <- flightDay_FSI[i,(j+startDate_FSI[i]-1)%%7+1]+1
}
}
}
## 기간 내 요일별 추정 운행일수 합산
totalFlight_FSI <- rep(0, times=nrow(subData2019_FSI))
flightWeekdays_FSI <- subData2019_FSI %>% select("mon","tue","wed","thu","fri","sat","sun")
for(i in 1:nrow(subData2019_FSI)){
for(j in 1:7){
if(flightWeekdays_FSI[i,j] != "N"){
totalFlight_FSI[i] <- totalFlight_FSI[i]+flightDay_FSI[i,j]
}
}
}
## 총 추정 운행일수 데이터를 subData_FSI에 합산
subData2019_FSI$totalFlight <- totalFlight_FSI
## 공항별 총 운항 횟수(출발+도착) 추출 + 컬럼명 변경(domestic->1, international->2)
subData2019_FSI <- subData2019_FSI %>% group_by(domesticCityCode, internationalCityCode) %>%
summarise(totalFlight=sum(totalFlight)) %>%
rename(cityCode1=domesticCityCode, cityCode2=internationalCityCode)
## 연도 및 국내/국제 타입 컬럼 추가
subData2019_FSI$flightYear <- rep(2019, times=nrow(subData2019_FSI))
subData2019_FSI$diType <- rep("I", times=nrow(subData2019_FSI))
## 출발/도착지 간 노선 거리 및 소요 시간 추가
subData2019_FSI <- left_join(subData2019_FSI, totalData_TD, by=c("diType", "cityCode1", "cityCode2"))
head(subData2019_FSI %>% arrange(desc(totalFlight)),3)
# 앞의 4개의 데이터를 regData에 합치기
regData <-  na.omit(subData2011_FSD) %>% arrange(desc(totalFlight*distance.km))
regData <- rbind(regData, na.omit(subData2019_FSD) %>% arrange(desc(totalFlight*distance.km)))
regData <- rbind(regData, na.omit(subData2011_FSI) %>% arrange(desc(totalFlight*distance.km)))
regData <- rbind(regData, na.omit(subData2019_FSI) %>% arrange(desc(totalFlight*distance.km)))
# 시각화를 위해 flightYear 타입 변환(numeric -> character)
regData$flightYear <- as.character(regData$flightYear)
# 출발/도착 도시명 단일화한 컬럼 추가
regData$flightCity <- paste0(regData$cityCode1, "-", regData$cityCode2)
# regData를 국내와 국제 데이터로 분리
regData_D <- regData %>% filter(diType == "D")
regData_I <- regData %>% filter(diType == "I")
# 국내/국제 데이터 기반 시각화
## 종합(좌측), 국내(중간) 및 국제(우측) 노선별 총 운항 횟수
fig2_T <- plot_ly(x = ~regData$flightYear, y = ~regData$totalFlight,
name = ~regData$flightCity, type="bar",
marker = list(line = list(color = '#FFFFFF', width = .3))) %>%
layout(margin = list(t=50),
xaxis = list(title = '<b>국내+국제</b>'),
yaxis = list(title = '<b>운항 횟수</b> (단위: 회)', tickformat = ",d", range=list(0, 170000)),
barmode="stack",
colorway=rep("#FF6119", times=nrow(regData)),
showlegend = FALSE)
fig2_D <- plot_ly(x = ~regData_D$flightYear, y = ~regData_D$totalFlight,
name = ~regData_D$flightCity, type="bar",
marker = list(line = list(color = '#FFFFFF', width = .3))) %>%
layout(margin = list(t=50),
xaxis = list(title = '<b>국내</b>'),
yaxis = list(title = '<b>운항 횟수</b> (단위: 회)', tickformat = ",d", range=list(0, 170000)),
barmode="stack",
colorway=rep("#FF905E", times=nrow(regData_D)),
showlegend = FALSE)
fig2_I <- plot_ly(x = ~regData_I$flightYear, y = ~regData_I$totalFlight,
name = ~regData_I$flightCity, type="bar",
marker = list(line = list(color = '#FFFFFF', width = .3))) %>%
layout(margin = list(t=50),
xaxis = list(title = '<b>국제</b>'),
yaxis = list(title = '<b>운항 횟수</b> (단위: 회)', tickformat = ",d", range=list(0, 170000)),
barmode="stack",
colorway=rep("#FF905E", times=nrow(regData_I)),
showlegend = FALSE)
fig2 <- subplot(fig2_T,fig2_D,fig2_I, margin = 0.02, shareX = TRUE,shareY = TRUE, titleY= TRUE) %>%
layout(title = list(text="<b>노선별 총 운항 횟수</b>",
xanchor="center",x=0.5,y=0.94))
fig2
# 노선별 총 운항횟수 데이터 추출
fig2Summarize <- regData %>% group_by(flightYear) %>% summarize(총운항횟수.회=sum(totalFlight))
fig2SummarizeD <- filter(regData, diType=="D") %>% group_by(flightYear) %>% summarize(국내총운항횟수.회=sum(totalFlight))
fig2SummarizeI <- filter(regData, diType=="I") %>% group_by(flightYear) %>% summarize(국제총운항횟수.회=sum(totalFlight))
fig2Summarize <- inner_join(fig2Summarize, fig2SummarizeD, by="flightYear")
fig2Summarize <- inner_join(fig2Summarize, fig2SummarizeI, by="flightYear")
fig2Summarize
fig3Data <- regData
fig3_T <- plot_ly(x = ~regData$flightYear, y = ~regData$totalFlight * regData$distance.km,
name = ~regData$flightCity, type="bar",
marker = list(line = list(color = '#FFFFFF', width = .3))) %>%
layout(margin = list(t=50),
xaxis = list(title = '<b>국내+국제</b>'),
yaxis = list(title = '<b>총 운항 거리</b> (단위: km)', tickformat = ",d", range=list(0, 20000000)),
barmode="stack",
colorway=rep("#1c9f10", times=nrow(regData)),
showlegend = FALSE)
fig3_D <- plot_ly(x = ~regData_D$flightYear, y = ~regData_D$totalFlight * regData_D$distance.km,
name = ~regData_D$flightCity, type="bar",
marker = list(line = list(color = '#FFFFFF', width = .3))) %>%
layout(margin = list(t=50),
xaxis = list(title = '<b>국내</b>'),
yaxis = list(title = '<b>총 운항 거리</b> (단위: km)', tickformat = ",d", range=list(0, 20000000)),
barmode="stack",
colorway=rep("#1c9f10", times=nrow(regData_D)),
showlegend = FALSE)
fig3_I <- plot_ly(x = ~regData_I$flightYear, y = ~regData_I$totalFlight * regData_I$distance.km,
name = ~regData_I$flightCity, type="bar",
marker = list(line = list(color = '#FFFFFF', width = .3))) %>%
layout(margin = list(t=50),
xaxis = list(title = '<b>국제</b>'),
yaxis = list(title = '<b>총 운항 거리</b> (단위: km)', tickformat = ",d", range=list(0, 20000000)),
barmode="stack",
colorway=rep("#1c9f10", times=nrow(regData_I)),
showlegend = FALSE)
fig3 <- subplot(fig3_T,fig3_D,fig3_I, margin = 0.02, shareX = TRUE,shareY = TRUE, titleY= TRUE) %>%
layout(title = list(text="<b>노선별 총 운항 거리</b>",
xanchor="center",x=0.5,y=0.94))
fig3
# 노선별 총 운항거리 데이터 추출
fig3Summarize <- regData %>% group_by(flightYear) %>% summarize(총운항거리.km=sum(totalFlight*distance.km))
fig3SummarizeD <- filter(regData, diType=="D") %>% group_by(flightYear) %>% summarize(국내총운항거리.km=sum(totalFlight*distance.km))
fig3SummarizeI <- filter(regData, diType=="I") %>% group_by(flightYear) %>% summarize(국제총운항거리.km=sum(totalFlight*distance.km))
fig3Summarize <- inner_join(fig3Summarize, fig3SummarizeD, by="flightYear")
fig3Summarize <- inner_join(fig3Summarize, fig3SummarizeI, by="flightYear")
fig3Summarize
# 증가율 함수 설정
growth <- function(frame, s){return(frame[2,s]-frame[1,s])}
growthRate <- function(frame, s){return((frame[2,s]-frame[1,s])/frame[1,s]*100)}
sprintf("종합 총 운항횟수 증가량: %d회,     증가율: %f%%", as.integer(growth(fig2Summarize, 2)), growthRate(fig2Summarize, 2))
sprintf("국내 총 운항횟수 증가량: %d회,     증가율: %f%%", as.integer(growth(fig2Summarize, 3)), growthRate(fig2Summarize, 3))
sprintf("국제 총 운항횟수 증가량: %d회,     증가율: %f%%", as.integer(growth(fig2Summarize, 4)), growthRate(fig2Summarize, 4))
sprintf("종합 총 운항거리 증가량: %dkm,     증가율: %f%%", as.integer(growth(fig3Summarize, 2)), growthRate(fig3Summarize, 2))
sprintf("국내 총 운항거리 증가량: %dkm,     증가율: %f%%", as.integer(growth(fig3Summarize, 3)), growthRate(fig3Summarize, 3))
sprintf("국제 총 운항거리 증가량: %dkm,     증가율: %f%%", as.integer(growth(fig3Summarize, 4)), growthRate(fig3Summarize, 4))
# 운항량 변화 꺾은선 그래프 제작(국내+국제 중 총 운항거리 변화량 상위 15개 및 하위 15개만 시각화)
## 프레임 형태를 바꾸기 위해 연도별로 분리
regData2011 <- filter(regData, flightYear=="2011")
regData2019 <- filter(regData, flightYear=="2019")
## 컬럼명 변경 (totalFlight를 flight20xx으로)
regData2011 <- rename(regData2011, "flight2011" = "totalFlight") %>% select(cityCode1, cityCode2, flightCity, flightYear, flight2011, diType, distance.km)
regData2019 <- rename(regData2019, "flight2019" = "totalFlight") %>% select(cityCode1, cityCode2, flightCity, flightYear, flight2019, diType, distance.km)
## full join 및 결측치는 0으로 치환 및 중복 데이터 제거 (PUS-FUK 노선 데이터 등 중복 사례 발견됨)
flightDiffData <- full_join(regData2011, regData2019,
by=c('cityCode1', 'cityCode2', 'flightCity', 'diType', 'distance.km')) %>%
distinct(cityCode1, cityCode2, flightCity, flight2011, flight2019, diType, distance.km)
flightDiffData[is.na(flightDiffData)] <- 0
## 총 운항횟수 변화량 및 운항거리 변화량 컬럼 추가
flightDiffData$flightDiff <- (flightDiffData$flight2019-flightDiffData$flight2011)
flightDiffData$distDiff.km <- (flightDiffData$flight2019-flightDiffData$flight2011)*flightDiffData$distance.km
## 추출하려는 데이터 개수
extNum <- 15
## 상위 및 하위 데이터 추출
fig4HeadData <- flightDiffData %>% arrange(desc(distDiff.km)) %>% head(extNum)
fig4TailData <- flightDiffData %>% arrange(desc(distDiff.km)) %>% tail(extNum)
fig4HeadData
fig4TailData
# 운항횟수 변화량별 정렬
fig4HeadData$flightCity <- factor(fig4HeadData$flightCity,
levels = unique(fig4HeadData$flightCity)[order(fig4HeadData$flightDiff, decreasing = TRUE)])
# 상위 데이터 제작
fig4_H <- plot_ly(y = ~fig4HeadData$flightDiff,
x = ~fig4HeadData$flightCity,
name = ~fig4HeadData$diType,
color = ~fig4HeadData$diType,
colors = c("#132B43", "#56B1F7"),
type = 'bar') %>%
layout(xaxis = list(title = '<b>상위 15개 노선</b>'),
yaxis = list(title = '<b>운항 횟수</b> (단위: 회)', tickformat = ",d"),
showlegend = FALSE)
# 운항횟수 변화량별 정렬
fig4TailData$flightCity <- factor(fig4TailData$flightCity,
levels = unique(fig4TailData$flightCity)[order(fig4TailData$flightDiff, decreasing = FALSE)])
# 하위 데이터 제작
fig4_T <- plot_ly(y = ~fig4TailData$flightDiff,
x = ~fig4TailData$flightCity,
name = ~fig4TailData$diType,
color = ~fig4TailData$diType,
colors = c("#c33838", "#f97d00"),
type = 'bar') %>%
layout(xaxis = list(title = '<b>하위 15개 노선</b>'),
yaxis = list(title = '<b>운항 횟수</b> (단위: 회)', tickformat = ",d"),
showlegend = FALSE)
# 상위 및 하위 데이터 합치기
fig4 <- subplot(fig4_H, fig4_T, margin = 0.02, shareX = TRUE,shareY = TRUE, titleY= TRUE) %>%
layout(title = list(text="<b>2011~2019년 간 총 운항거리 (운항 횟수 * 노선 거리)\n상위 및 하위 각각 15개 노선 총 운항횟수 변화량</b>",
xanchor="center",x=0.5,y=0.94))
fig4
for(x in 0:5){
y = x * 15 + 1
print(y)
}
basic_url <- "https://www.donga.com/news/search?query=bigkini&more=1&range=3&p="
urls <- NULL
for(x in 0:5){
urls[x+1] <- paste0(basic_url, x*15+1)
}
urls
install.packages('rvest')
library(rvest)
read_html(urls[1])
html <- read_html(urls[1])
html_nodes(html, '.searchCont')
html3 <- html_nodes(html2, 'a')
html2 <- html_nodes(html, '.searchCont')
html3 <- html_nodes(html2, 'a')
html3
links <- html_attr(html3, 'href')
links
install.packages('dplyr')
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
